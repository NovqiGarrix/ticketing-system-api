//! `SeaORM` Entity, @generated by sea-orm-codegen 2.0.0-rc.9

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "showtime_room")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub time: DateTime,
    pub price: i32,
    pub room_id: Uuid,
    pub showtime_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::room::Entity",
        from = "Column::RoomId",
        to = "super::room::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Room,
    #[sea_orm(
        belongs_to = "super::showtime::Entity",
        from = "Column::ShowtimeId",
        to = "super::showtime::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Showtime,
    #[sea_orm(has_many = "super::taken_seat::Entity")]
    TakenSeat,
}

impl Related<super::room::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Room.def()
    }
}

impl Related<super::showtime::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Showtime.def()
    }
}

impl Related<super::taken_seat::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TakenSeat.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
